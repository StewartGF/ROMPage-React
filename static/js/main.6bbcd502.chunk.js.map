{"version":3,"sources":["components/Header.js","components/Grafico.js","components/Item.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["Header","datosConsulta","bgStyle","border","background","useState","texto","Busqueda","setBusqueda","className","style","onSubmit","evento","preventDefault","type","name","placeholder","aria-label","onChange","target","value","Grafico","precios","data","labels","fechaLabel","datasets","label","backgroundColor","borderColor","lineTension","fill","stepped","liveJoin","hoverRadius","hitRadius","hoverBorderWidth","borderWidth","radius","pointHoverBackgroundColor","options","tooltips","callbacks","tooltipItem","yLabel","toString","replace","position","responsive","layout","padding","top","scales","scaleLabel","fontColor","lineHeight","xAxes","gridLines","color","yAxes","zeroLineColor","zeroLineWidth","drawBorder","drawTicks","offsetGridLines","ticks","display","Item","item","bgc","borderStyle","fontCard","fontActualizacion","fontSize","length","map","detalle","index","chartPrecios","chartFechas","hora","Date","global","latest_time","precioFormateado","latest","key","toLocaleString","slice","week","push","price","trimmed","time","minWidth","Loading","mensaje","porings","imagen","sort","Math","random","zIndex","poring","src","alt","width","height","App","componente","search","setSearch","resultado","setResultado","error","setError","useEffect","a","url","fetch","respuesta","json","consultaAPI","datos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bbcd502.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Header({ datosConsulta }) {\r\n  const bgStyle = {\r\n    border: \"1px solid rgb(30,30,46)\",\r\n    background: \"rgb(30,30,46)\"\r\n  };\r\n  /***\r\n   * State del componente\r\n   * searchQ : state\r\n   * setSearchQ: setState del componente\r\n   */\r\n  const [Busqueda, setBusqueda] = useState({\r\n    texto: \"\"\r\n  });\r\n\r\n  const handleChange = evento => {\r\n    setBusqueda({\r\n      ...Busqueda,\r\n      [evento.target.name]: evento.target.value\r\n    });\r\n    datosConsulta(Busqueda);\r\n  };\r\n\r\n  const consultarAPI = evento => {\r\n    evento.preventDefault();\r\n    //entrega Busqueda al App.\r\n    datosConsulta(Busqueda);\r\n  };\r\n  return (\r\n    <div className=\"d-flex justify-content-center\" style={bgStyle}>\r\n      <nav className=\"navbar \" style={bgStyle}>\r\n        <form\r\n          className=\"form-inline\"\r\n          onSubmit={consultarAPI}\r\n          style={{\r\n            border: \"1px solid rgb(30,30,46)\",\r\n            background: \"rgb(30,30,46)\"\r\n          }}\r\n        >\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            name=\"texto\"\r\n            placeholder=\"Buscar\"\r\n            aria-label=\"Buscar\"\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className=\"btn botonBuscar hovered  my-2 my-sm-0\"\r\n            type=\"submit\"\r\n          >\r\n            Buscar\r\n          </button>\r\n        </form>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nexport default function Grafico({ precios, fechaLabel }) {\r\n  const data = {\r\n    labels: fechaLabel, // aca van las fechas trimeadas\r\n    datasets: [\r\n      {\r\n        label: \"Global\",\r\n        data: precios,\r\n        backgroundColor: \"rgb(161,21,80)\",\r\n        borderColor: \"rgb(39,41,61)\",\r\n        lineTension: 0.1,\r\n        fill: true,\r\n        stepped: true,\r\n        liveJoin: \"round\",\r\n        hoverRadius: 7,\r\n        hitRadius: 16,\r\n        hoverBorderWidth: 2,\r\n        borderWidth: 2,\r\n        radius: 3.5,\r\n        pointHoverBackgroundColor: \"rgb(243, 48, 131)\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    tooltips: {\r\n      callbacks: {\r\n        label: function(tooltipItem, data) {\r\n          return (\r\n            tooltipItem.yLabel\r\n              .toString()\r\n              .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\") + \" Z\"\r\n          );\r\n        }\r\n      }\r\n    },\r\n    position: \"relative\",\r\n    responsive: true,\r\n    layout: {\r\n      padding: {\r\n        top: 8\r\n      }\r\n    },\r\n    scales: {\r\n      scaleLabel: {\r\n        fontColor: \"blue\",\r\n        lineHeight: 3\r\n      },\r\n      xAxes: [\r\n        {\r\n          gridLines: {\r\n            color: \"rgba(0, 0, 0, 0)\"\r\n          }\r\n        }\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            color: \"rgba(0, 0, 0, 0)\",\r\n            zeroLineColor: \"rgb(161,21,80)\",\r\n            zeroLineWidth: 2,\r\n            drawBorder: false,\r\n            drawTicks: false,\r\n            offsetGridLines: false\r\n          },\r\n          ticks: {\r\n            display: false\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  };\r\n  const fontCard = {\r\n    background: \"rgb(229, 229, 229)\"\r\n  };\r\n  return (\r\n    <div className=\"card-body\" style={fontCard}>\r\n      <Line options={options} data={data}></Line>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Grafico from \"./Grafico\";\r\n\r\n// envolví data en {} para destructurar el prop que envié desde APP\r\nfunction Item({ data }) {\r\n  //paso data a una variable dentro del componente\r\n  const item = data;\r\n  const bgc = {\r\n    background: \"rgb(232, 232, 232)\"\r\n  };\r\n  const borderStyle = {\r\n    border: \"2.5px solid rgb(161,21,80)\"\r\n  };\r\n  const fontCard = {\r\n    color: \"rgb(161,21,80)\"\r\n  };\r\n  const fontActualizacion = {\r\n    color: \"rgb(39,41,1)\",\r\n    fontSize: \"11px\"\r\n  };\r\n  if (item.length > 2) {\r\n    return (\r\n      <div className=\"card-group\">\r\n        <div className=\"row\">\r\n          {/* recorro mapeando cada item  */}\r\n          {item.map((detalle, index) => {\r\n            let chartPrecios = [];\r\n            let chartFechas = [];\r\n            let hora = new Date(detalle.global.latest_time);\r\n            let precioFormateado =\r\n              detalle.global.latest\r\n                .toString()\r\n                .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\") + \" Zeny\";\r\n            return (\r\n              <div key={index} className=\"col-sm-6 col-lg-3 py-2\">\r\n                <div className=\"card mb3\" style={(borderStyle, bgc)}>\r\n                  <div className=\"card-body\" style={fontCard}>\r\n                    {/* debido al map no necesito el index porque hara la acción N veces hasta el fin del largo del arreglo */}\r\n                    <h5 className=\"card-title\">{detalle.name}</h5>\r\n                    <p className=\"card-text text-dark\">\r\n                      Precio : {precioFormateado}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"card-footer\">\r\n                    <small style={fontActualizacion}>\r\n                      Última Actualización :{\" \"}\r\n                      {hora.toLocaleString().slice(0, -3)}\r\n                      <br></br>\r\n                      {detalle.global.week.data.map((data, index) => {\r\n                        chartPrecios.push(data.price);\r\n                        let fecha = new Date(data.time);\r\n                        let trimmed = fecha.toLocaleString().slice(0, -13);\r\n                        chartFechas.push(trimmed);\r\n                      })}\r\n                    </small>\r\n                  </div>\r\n\r\n                  <Grafico\r\n                    precios={chartPrecios}\r\n                    fechaLabel={chartFechas}\r\n                  ></Grafico>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  } //fin if\r\n  else {\r\n    return (\r\n      <div className=\"card-group\">\r\n        <div className=\"row\">\r\n          {/* recorro mapeando cada item  */}\r\n          {item.map((detalle, index) => {\r\n            let chartPrecios = [];\r\n            let chartFechas = [];\r\n            let hora = new Date(detalle.global.latest_time);\r\n            let precioFormateado =\r\n              detalle.global.latest\r\n                .toString()\r\n                .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\") + \" Zeny\";\r\n            return (\r\n              <div\r\n                key={index}\r\n                className=\"col-sm-4 col-lg-4 py-2\"\r\n                style={{ minWidth: \"100%\" }}\r\n              >\r\n                <div className=\"card mb3\" style={borderStyle}>\r\n                  <div className=\"card-body\" style={fontCard}>\r\n                    {/* debido al map no necesito el index porque hara la acción N veces hasta el fin del largo del arreglo */}\r\n                    <h5 className=\"card-title\">{detalle.name}</h5>\r\n                    <p className=\"card-text text-dark\">\r\n                      Precio : {precioFormateado}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"card-footer\">\r\n                    <small style={fontActualizacion}>\r\n                      Última Actualización :{\" \"}\r\n                      {hora.toLocaleString().slice(0, -3)}\r\n                      <br></br>\r\n                      {detalle.global.week.data.map((data, index) => {\r\n                        // let format = data.price\r\n                        //   .toString()\r\n                        //   .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\");\r\n                        chartPrecios.push(data.price);\r\n                        let fecha = new Date(data.time);\r\n                        let trimmed = fecha.toLocaleString().slice(0, -13);\r\n                        chartFechas.push(trimmed);\r\n                      })}\r\n                    </small>\r\n                  </div>\r\n\r\n                  <Grafico\r\n                    precios={chartPrecios}\r\n                    fechaLabel={chartFechas}\r\n                  ></Grafico>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\n\r\nfunction Loading({ mensaje }) {\r\n  let porings = [\r\n    { imagen: \"imagenes/marin.gif\" },\r\n    { imagen: \"imagenes/poring.gif\" },\r\n    { imagen: \"imagenes/poporing.gif\" },\r\n    { imagen: \"imagenes/angeling.gif\" },\r\n  ];\r\n  //modificar el orden del array para mostrar las imagenes de distinta forma cada vez\r\n  porings.sort(() => 0.5 - Math.random());\r\n  return (\r\n    <div className=\"container\" style={{ zIndex: 3 }}>\r\n      <div className=\"text-center\">\r\n        <div style={{ color: \"white\" }}>{mensaje}</div>\r\n        {porings.map((poring, index) => {\r\n          return (\r\n            <img\r\n              key={index}\r\n              src={poring.imagen}\r\n              alt={index}\r\n              style={{ width: \"10%\", height: \"10%\" }}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Item from \"./components/Item\";\nimport Loading from \"./components/Loading\";\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [resultado, setResultado] = useState([]);\n\n  const [error, setError] = useState(false);\n  //let arrayData = [];\n  useEffect(() => {\n    // if (search === \"\") {\n    setError(true);\n    //  return;\n    //}\n\n    const consultaAPI = async () => {\n      let url = `https://stewartgf-cors-anywhere.herokuapp.com/https://www.romexchange.com/api?item=${search}&exact=false&sort_server=global`;\n      const respuesta = await fetch(url);\n      const data = await respuesta.json();\n      // let dataNombre = data.map(data => {\n      //   return data.name;\n      // });\n      // let dataPrecio = data.map(data => {\n      //   return data.global.latest;\n      // });\n      /**ESTO LO HICE POR QUE NO HICE LO DE DESTRUCTURAR LA DATA EN EL COMPONENTE ITEM\n       * EN CASO DE QUE DEJE DE FUNCIONAR DESCOMENTAR ESTO Y USARLO PASANDO POR PROP ARRAYDATA AL COMPONENTE ITEM\n       */\n      // Object.entries(dataNombre).forEach((data, index) => {\n      //   arrayData.push({\n      //     nombre: dataNombre[index],\n      //     precio: dataPrecio[index]\n      //   });\n      // });\n      // console.log(arrayData);\n      //cambiar data por arrayData\n      setResultado(data);\n\n      setError(false);\n    };\n\n    consultaAPI();\n  }, [search]);\n\n  const datosConsulta = (datos) => {\n    setSearch(datos.texto);\n  };\n\n  //montar y desmontar el container con items\n  let componente;\n  if (error) {\n    //hay error, desmontar container\n    componente = <Loading mensaje=\"Cargando...\"></Loading>;\n  } else if (resultado.length > 0) {\n    //montar container\n    componente = <Item data={resultado}></Item>;\n  }\n\n  return (\n    <div>\n      <Header datosConsulta={datosConsulta} />\n      <div className=\"container\">\n        <div className=\"row\">{componente}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}